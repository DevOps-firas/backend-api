name: Basic workflow develop

# trigger
on:
  push:
    branches:
      - main

env:
  DDOCKER_IMAGE: ${{ vars.DOCKER_HUB_USERNAME }}/api-session13

jobs:
  run-unit-test-job:
    runs-on: ubuntu-latest
    steps:
      - name: Clone Source Code
        uses: actions/checkout@v4

      - name: install dependencies
        run: npm install

      - name: run unit test
        run: npm run test

  sonarqube-code-quality-scan-job:
    runs-on: ubuntu-latest
    needs: run-unit-test-job
    steps:
      - name: Clone Source Code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          # SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  snyk-code-security-scan-job:
    runs-on: ubuntu-latest
    needs: run-unit-test-job
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install Dependency Scanning Tool (Snyk)
        run: npm install -g snyk

      - name: Snyk Authentication
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      # Run test but allow pipeline to continue (we‚Äôll capture the result)
      - name: Run Snyk Vulnerability Scan (test)
        id: snyk_test
        run: |
          snyk test --all-projects | echo "exit_code=$?" >> $GITHUB_OUTPUT
        continue-on-error: true

      # Monitor and capture the project URL
      - name: Run Snyk Monitor
        id: snyk_monitor
        run: |
          MONITOR_OUTPUT=$(snyk monitor --all-projects --org=firasaydi)
          echo "Monitor output: $MONITOR_OUTPUT"

          MONITOR_URL=$(echo "$MONITOR_OUTPUT" | grep -o 'https://app.snyk.io/org/[^ ]*' | head -1 || echo "")

          if [ -z "$MONITOR_URL" ]; then
            MONITOR_URL=$(echo "$MONITOR_OUTPUT" | grep -o 'https://app.snyk.io/[^ ]*' | head -1 || echo "")
          fi

          if [ -z "$MONITOR_URL" ]; then
            MONITOR_URL="https://app.snyk.io/org/firasaydi/projects"
          fi

          echo "monitor_url=$MONITOR_URL >> $GITHUB_OUTPUT"
          echo "Captured Snyk Monitor URL: $MONITOR_URL"
      # Fail if vulnerabilities were found
      - name: Check Snyk Test Result
        run: |
          if [ "${{ steps.snyk_test.outcome }}" == "failure" ]; then
            echo "‚ùå Vulnerabilities detected"
            exit 1
          fi
          echo "‚úÖ No vulnerabilities found"

      - name: Notify Slack on Success
        if: success()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "‚úÖ *Snyk scan passed!* üéâ\nüîÅ Branch: `${{ github.ref_name }}`\n
              üîó [Monitor Report](${{ env.SNYK_URL }})\nüîó [Workflow Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              [View Snyk Dashboard](${{ steps.snyk_monitor.outputs.monitor_url }})"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify Slack on Failure
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "‚ùå *Snyk scan failed* ‚ùóÔ∏è\nüîÅ Branch: `${{ github.ref_name }}`\n
              üîó [Monitor Report](${{ env.SNYK_URL }})\n
              üîó [Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  trivy-image-security-scan-job:
    runs-on: ubuntu-latest
    needs: run-unit-test-job
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y curl
      - name: Download and install Trivy
        run: |
          curl -sSL https://github.com/aquasecurity/trivy/releases/download/v0.29.0/trivy_0.29.0_Linux-64bit.tar.gz -o trivy.tar.gz
          tar xzvf trivy.tar.gz
          sudo mv trivy /usr/local/bin/
          trivy --version

      - name: Run Trivy filesystem vulnerability scan
        run: trivy fs .

      - name: Run Trivy Docker image vulnerability scan
        run: |
          docker build -t ${{ env.IMAGE_NAME }} .
          trivy image ${{ env.IMAGE_NAME }}

  build-docker-image-and-push:
    runs-on: ubuntu-latest
    needs:
      [
        sonarqube-code-quality-scan-job,
        snyk-code-security-scan-job,
        trivy-image-security-scan-job,
      ]
    if: success()
    steps:
      - name: Clone Source Code
        uses: actions/checkout@v4

      - name: build docker image
        run: docker build -t ${{ env.DDOCKER_IMAGE }} .

      - name: tag docker image with github run number
        run: docker tag ${{ env.DDOCKER_IMAGE }} ${{ env.DDOCKER_IMAGE }}:v${{github.run_number}}

      - run: docker images

      - name: login to docker hub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: push Docker image
        run: docker push ${{ env.DDOCKER_IMAGE }}:v${{github.run_number}}

      - name: push docker image latest
        run: docker push ${{ env.DDOCKER_IMAGE }}:latest

  deploy-to-vps:
    runs-on: ubuntu-latest
    needs: build-docker-image-and-push
    steps:
      - name: Execute remote SSH commands using password
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: user
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            cd /home/user/devops-script/backend-api/dev
            sudo docker compose pull api
            sudo docker compose up -d --force-recreate --remove-orphans api
